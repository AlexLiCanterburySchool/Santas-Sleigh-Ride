import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

class Sleigh {
    private int positionX;
    private final int positionY = 10; // Sleigh stays at the bottom of the screen

    public Sleigh(int startX) {
        this.positionX = startX;
    }

    public void moveLeft() {
        positionX = Math.max(0, positionX - 1); // Prevent going out of bounds
    }

    public void moveRight(int maxWidth) {
        positionX = Math.min(maxWidth - 1, positionX + 1); // Prevent going out of bounds
    }

    public int getPositionX() {
        return positionX;
    }

    public int getPositionY() {
        return positionY;
    }
}

abstract class Obstacle {
    protected int positionX;
    protected int positionY;

    public Obstacle(int x, int y) {
        this.positionX = x;
        this.positionY = y;
    }

    public abstract void move();

    public int getPositionX() {
        return positionX;
    }

    public int getPositionY() {
        return positionY;
    }
}

class Cloud extends Obstacle {
    public Cloud(int x, int y) {
        super(x, y);
    }

    @Override
    public void move() {
        positionY++; // Clouds move downward
    }
}

class Chimney extends Obstacle {
    public Chimney(int x, int y) {
        super(x, y);
    }

    @Override
    public void move() {
        positionY++; // Chimneys move downward
    }
}

class GameEngine {
    private final int screenWidth = 20; // Width of the screen
    private final int screenHeight = 15; // Height of the screen
    private Sleigh sleigh;
    private List<Obstacle> obstacles;
    private int score;
    private boolean gameOver;

    public GameEngine() {
        sleigh = new Sleigh(screenWidth / 2);
        obstacles = new ArrayList<>();
        score = 0;
        gameOver = false;
    }

    public void spawnObstacle() {
        Random random = new Random();
        int positionX = random.nextInt(screenWidth);
        if (random.nextBoolean()) {
            obstacles.add(new Cloud(positionX, 0));
        } else {
            obstacles.add(new Chimney(positionX, 0));
        }
    }

    public void moveObstacles() {
        for (Obstacle obstacle : obstacles) {
            obstacle.move();
        }
        // Remove obstacles that are off-screen
        obstacles.removeIf(obstacle -> obstacle.getPositionY() > screenHeight);
    }

    public void checkCollision() {
        for (Obstacle obstacle : obstacles) {
            if (obstacle.getPositionX() == sleigh.getPositionX() &&
                obstacle.getPositionY() == sleigh.getPositionY()) {
                gameOver = true;
                break;
            }
        }
    }

    public void render() {
        char[][] screen = new char[screenHeight][screenWidth];

        // Fill the screen with empty spaces
        for (int i = 0; i < screenHeight; i++) {
            for (int j = 0; j < screenWidth; j++) {
                screen[i][j] = ' ';
            }
        }

        // Draw the sleigh
        screen[sleigh.getPositionY()][sleigh.getPositionX()] = 'S';

        // Draw the obstacles
        for (Obstacle obstacle : obstacles) {
            if (obstacle.getPositionY() < screenHeight) {
                screen[obstacle.getPositionY()][obstacle.getPositionX()] = 'O';
            }
        }

        // Display the screen
        for (char[] row : screen) {
            for (char c : row) {
                System.out.print(c);
            }
            System.out.println();
        }

        System.out.println("Score: " + score);
    }

    public void updateScore() {
        score++;
    }

    public void play() {
        Scanner scanner = new Scanner(System.in);
        Random random = new Random();
        int spawnCounter = 0;

        System.out.println("ðŸŽ… Welcome to Santa's Sleigh Ride! ðŸŽ„");
        System.out.println("Use 'a' to move left, 'd' to move right. Avoid the obstacles!");
        System.out.println("Press Enter to start...");
        scanner.nextLine();

        while (!gameOver) {
            // Clear the screen
            System.out.print("\033[H\033[2J");
            System.out.flush();

            // Spawn obstacles at random intervals
            if (spawnCounter % 5 == 0) {
                spawnObstacle();
            }

            // Move obstacles and check for collisions
            moveObstacles();
            checkCollision();

            // Update and render the game state
            render();
            updateScore();

            // Get player input
            System.out.print("Move (a/d): ");
            String input = scanner.nextLine();
            if (input.equals("a")) {
                sleigh.moveLeft();
            } else if (input.equals("d")) {
                sleigh.moveRight(screenWidth);
            }

            // Slow down the game loop
            try {
                Thread.sleep(300); // 300ms delay
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            spawnCounter++;
        }

        System.out.println("\nðŸŽ… Oh no! Game over! Your final score: " + score + " ðŸŽ„");
        scanner.close();
    }
}

public class SantasSleighRide {
    public static void main(String[] args) {
        GameEngine game = new GameEngine();
        game.play();
    }
}
